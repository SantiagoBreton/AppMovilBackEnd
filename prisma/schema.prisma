// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String
  password String
  rating Float

  event Event[]

  EventUser EventUser[]

  UserProfileImage UserProfileImage[]

  EventPendingRequest EventPendingRequest[]

  EventRatingByUser EventRatingByUser[]

  UserRatingByUser UserRatingByUser[] @relation(name: "UserRatingUser")

  ratedByUsers UserRatingByUser[] @relation(name: "UserRatingRatingUser")
}

model Event {
  id Int @id @default(autoincrement())
  name String
  date DateTime
  latitude Float
  longitude Float
  latitudeOffset Float
  longitudeOffset Float
  description String
  maxParticipants Int
  currentParticipants Int
  rating Float
  userId Int
  user User @relation(fields: [userId], references: [id])
  EventUser EventUser[]

  EventPendingRequest EventPendingRequest[]

  EventRatingByUser EventRatingByUser[]
}

model EventRatingByUser {
  id Int @id @default(autoincrement())
  userId Int
  eventId Int
  comment String
  rating Int
  user User @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}



model UserRatingByUser {
  id Int @id @default(autoincrement())
  userId Int
  ratingUserId Int
  comment String
  rating Int
  user User @relation(fields: [userId], references: [id], name: "UserRatingUser")
  ratingUser User @relation(fields: [ratingUserId], references: [id], name: "UserRatingRatingUser")
}



model EventPendingRequest {
  id Int @id @default(autoincrement())
  userId Int
  eventId Int
  user User @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])
}


model EventUser {
  userId    Int
  eventId   Int
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([userId, eventId]) // Composite primary key
}

model UserProfileImage {
  id Int @id @default(autoincrement())
  userId Int
  imageUrl String
  user User @relation(fields: [userId], references: [id])
}